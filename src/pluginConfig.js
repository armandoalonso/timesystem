// WARNING: DO NOT EDIT THIS FILE, IT IS AUTOGENERATED
module.exports = {
  addonType: "plugin",
  id: "piranha305_timesystem",
  name: "Time System",
  version: "1.1.0.2",
  category:
    // "3d",
    // "data-and-storage",
    // "form-controls",
    // "input",
    // "media",
    // "monetisation",
    // "platform-specific",
    // "web",
    "other",
    // "general",
  author: "piranha305",
  website: "https://piranha305.itch.io/",
  documentation: "https://github.com/armandoalonso/timesystem/blob/main/README.md",
  description: "A construct plugin to manage in-game time.",
  addonUrl: "https://www.construct.net/en/make-games/addons/1101/time-system", // displayed in auto-generated docs
  githubUrl: "https://github.com/armandoalonso/timesystem", // displays latest release version in auto-generated docs
  // icon: "icon.svg", // defaults to "icon.svg" if omitted
  type: "object",   // world, object, dom
  domSideScripts: [
    // "domSide.js", // no need to include "c3runtime/" prefix
  ],
  fileDependencies: [
    /*
    {
      filename: "filename.js", // no need to include "c3runtime/" prefix
      type:
        "copy-to-output"
        "inline-script"
        "external-dom-script"
        "external-runtime-script"
        "external-css"

      // for copy-to-output only
      // fileType: "image/png"
    }
    */
  ],
  info: {
    // world only
    defaultImageUrl: null,
    Set: {
      // world only
      IsResizable: false,
      IsRotatable: false,
      Is3D: false,
      HasImage: false,
      IsTiled: false,
      SupportsZElevation: false,
      SupportsColor: false,
      SupportsEffects: false,
      MustPreDraw: false,

      // object only
      IsSingleGlobal: true,

      // world and object
      CanBeBundled: true,
      IsDeprecated: false,
      GooglePlayServicesEnabled: false,
    },
    AddCommonACEs: {
      // world only
      Position: false,
      SceneGraph: false,
      Size: false,
      Angle: false,
      Appearance: false,
      ZOrder: false,
    },
  },
  properties: [
    {
      type: "check",
      id: "Enabled",
      name: "Enabled",
      desc: "Enable or disable the timne system behavior. (if disabled will not tick)",
      options: {
        initialValue: true,
      },
    },
    {
      type: "float",
      id: "TickRate",
      name: "Tick Rate",
      desc: "How many seconds between each tick. (default 1)",
      options: {
        initialValue: 1,
        minValue: 0,
      },
    },
    {
      type: "combo",
      id: "TickDurationType",
      name: "Tick Duration Type",
      desc: "The type of tick duration.",
      options: {
        initialValue: "perMintue",
        items: [
          { "perMintue": "Tick Per Mintue" },
          { "perHour": "Tick Per Hour" },
          { "perDay": "Tick Per Day" },
          { "perMonth": "Tick Per Month" },
          { "perYear": "Tick Per Year" },
        ],
      },
    },
    {
      type: "float",
      id: "TicksPerX",
      name: "Ticks Per X",
      desc: "How many ticks per X(duration type).",
      options: {
        initialValue: 60,
        minValue: 0,
      },
    },
    {
      type: "integer",
      id: "CurrentMinute",
      name: "Current Minute",
      desc: "The current minute.",
      options: {
        initialValue: 0,
        minValue: 0,
        maxValue: 59,
      },
    },
    {
      type: "integer",
      id: "CurrentHour",
      name: "Current Hour",
      desc: "The current hour.",
      options: {
        initialValue: 0,
        minValue: 0,
        maxValue: 23,
      },
    },
    {
      type: "integer",
      id: "CurrentDay",
      name: "Current Day",
      desc: "The current day.",
      options: {
        initialValue: 1,
        minValue: 1,
        maxValue: 31,
      },
    },
    {
      type: "integer",
      id: "CurrentMonth",
      name: "Current Month",
      desc: "The current month.",
      options: {
        initialValue: 1,
        minValue: 1,
        maxValue: 12,
      },
    },
    {
      type: "integer",
      id: "CurrentYear",
      name: "Current Year",
      desc: "The current year.",
      options: {
        initialValue: 2021,
        minValue: 0,
        maxValue: 9999,
      },
    },
    {
      type: "check",
      id: "AutoDetermineDay",
      name: "Auto Determine Day",
      desc: "Determines the day based on the defined date, if false the current day will be caluclated from defined current day of week",
      options: {
        initialValue: false,
      },
    },
    {
      type: "combo",
      id: "CurrentDayOfWeek",
      name: "Current Day Of Week",
      desc: "The current day of the week.",
      options: {
        initialValue: 'sun',
        items: [
          { sun: "Sunday" },
          { mon: "Monday" },
          { tue: "Tuesday" },
          { wed: "Wednesday" },
          { thurs: "Thursday" },
          { fri: "Friday" },
          { sat: "Saturday" },
        ],
      },
    },
    {
        type: "combo",
        id: "DayPhases",
        name: "Day Phases",
        desc: "How many phases will trigger in the day.",
        options: {
          initialValue: "four",
          items: [
            { "two": "2 Phases)" },
            { "four": "4 Phases" },
            { "six": "6 Phases" },
          ],
        }
    }

    // 4 phases
    // 6am - 12pm = morning
    // 12pm - 6pm = afternoon
    // 6pm - 12am = night
    // 12am - 6am = late night

    // 6 phases
    // 5am - 8am = dawn
    // 8am - 1pm = morning
    // 1pmpm - 5pm = afternoon
    // 5pm - 8pm = dusk
    // 8pm - 12am = night
    // 12am - 5am = late night

    // 8 phases
    // 5am - 8am = dawn
    // 8am - 11am = morning
    // 11am - 2pm = noon
    // 2pm - 5pm = afternoon
    // 5pm - 8pm = dusk
    // 8pm - 11pm = night
    // 11pm - 2am = midnight
    // 2am - 5am = late night
  
    
    /*
    {
      type:
        "integer"
        "float"
        "percent"
        "text"
        "longtext"
        "check"
        "font"
        "combo"
        "color"
        "object"
        "group"
        "link"
        "info"

      id: "property_id",
      options: {
        initialValue: 0,
        interpolatable: false,

        // minValue: 0, // omit to disable
        // maxValue: 100, // omit to disable

        // for type combo only
        // items: [
        //   {itemId1: "item name1" },
        //   {itemId2: "item name2" },
        // ],

        // dragSpeedMultiplier: 1, // omit to disable

        // for type object only
        // allowedPluginIds: ["Sprite", "<world>"],

        // for type link only
        // linkCallback: `function(instOrObj) {}`,
        // linkText: "Link Text",
        // callbackType:
        //   "for-each-instance"
        //   "once-for-type"

        // for type info only
        // infoCallback: `function(inst) {}`,
      },
      name: "Property Name",
      desc: "Property Description",
    }
    */
  ],
  aceCategories: {
    // follows the format id: langName
    // in the ACEs refer to categories using the id, not the name
    general: "General",
    date: "Date",
    time: "Time",
    datetime: "Date/Time",
    settings: "Settings",
    dayPhase: "Day Phase",
    season: "Seasons",
    solarTerm: "Solar Terms",
    triggers: "Triggers",
  },
  Acts: {
    StartTimeSystem: {
      category : "settings",
      forward: "StartTickSystem",
      highlight : false,
      deprecated : false,
      params: [],
      listName : "Start Time System",
      displayText : "Start Time System",
      description : "Starts the time system, enabled ticking",
    },
    StopTimeSystem: {
      category : "settings",
      forward: "StopTickSystem",
      highlight : false,
      deprecated : false,
      params: [],
      listName : "Stop Time System",
      displayText : "Stop Time System",
      description : "Stops the time system, disables ticking",
    },
    SetTickRate: { 
      category : "settings",
      forward: "SetTickRate",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "rate",
          name: "Rate",
          desc: "How many seconds between each tick",
          type: "number",
          value: "1",
        }
      ],
      listName : "Set Tick Rate",
      displayText : "Set Tick Rate to {0}",
      description : "Sets the tick rate.",
    },
    SetTicksDuration: {
      category : "settings",
      forward: "SetTicksDuration",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "ticks",
          name: "Ticks",
          desc: "How many ticks per duration type",
          type: "number",
          value: "60",
        },
        {
          id: "type",
          name: "Type",
          desc: "The type of tick duration.",
          type: "combo",
          value: "perMintue",
          items: [
            { "perMintue": "Tick Per Mintue" },
            { "perHour": "Tick Per Hour" },
            { "perDay": "Tick Per Day" },
            { "perMonth": "Tick Per Month" },
            { "perYear": "Tick Per Year" },
          ],
        }
      ],
      listName : "Set Ticks Duration",
      displayText : "Set {1} to {0}",
      description : "Sets the ticks per {x} duration.",
    },
    SetDate:{
      category: "date",
      forward: "SetDate",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "day",
          name: "Day",
          desc: "The day to set.",
          type: "number",
          value: "1",
        },
        {
          id: "month",
          name: "Month",
          desc: "The month to set.",
          type: "number",
          value: "1",
        },
        {
          id: "year",
          name: "Year",
          desc: "The year to set.",
          type: "number",
          value: "2021",
        },
      ],
      listName : "Set Date",
      displayText : "Set Date to {1}/{0}/{2} ",
      description : "Sets the date.",
    },
    SetTime: {
      category : "time",
      forward: "SetTime",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "hour",
          name: "Hour",
          desc: "The hour to set.",
          type: "number",
          value: "0",
        },
        {
          id: "minute",
          name: "Minute",
          desc: "The minute to set.",
          type: "number",
          value: "0",
        },
        {
          id: "ampm",
          name: "Time Phase",
          desc: "The time phase to set. (am/pm)",
          type: "combo",
          value: "am",
          items: [
            { "am": "am" },
            { "pm": "pm" },
          ],
        }
      ],
      listName : "Set Time",
      displayText : "Set Time to {0} and {1} mintues, {2}",
      description : "Sets the time.",
    },
    SetDateTime: {
      category : "datetime",
      forward: "SetDateTime",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "day",
          name: "Day",
          desc: "The day to set. (1-31)",
          type: "number",
          value: "1",
        },
        {
          id: "month",
          name: "Month",
          desc: "The month to set. (1-12)",
          type: "number",
          value: "1",
        },
        {
          id: "year",
          name: "Year",
          desc: "The year to set.",
          type: "number",
          value: "2021",
        },
        {
          id: "hour",
          name: "Hour",
          desc: "The hour to set. (12 hour format)",
          type: "number",
          value: "0",
        },
        {
          id: "minute",
          name: "Minute",
          desc: "The minute to set. (0-59)",
          type: "number",
          value: "0",
        },
        {
          id: "ampm",
          name: "Time Phase",
          desc: "The time phase to set. (am/pm)",
          type: "combo",
          value: "am",
          items: [
            { "am": "am" },
            { "pm": "pm" },
          ],
        }
      ],
      listName : "Set Date Time",
      displayText : "Set Date Time to {0}/{1}/{2} , {3} : {4}, {5}",
      description : "Sets the date and time.",
    },
    SetAutoDetermineDay: {
      category : "settings",
      forward: "SetAutoDetermineDay",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "auto",
          name: "Auto",
          desc: "Determines the day based on the defined date",
          type: "boolean",
          value: "false",
        }
      ],
      listName : "Set Auto Determine Day",
      displayText : "Set Auto Determine Day to {0}",
      description : "Sets the auto determine day. Determines the day based on the defined date, if false the current day will be caluclated from defined current day of week",
    },
    SetDayOfWeek: {
      category: "date",
      forward: "SetDayOfWeek",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "day",
          name: "Day",
          desc: "The day to set.",
          type: "combo",
          value: "sun",
          items: [
            { sun: "Sunday" },
            { mon: "Monday" },
            { tue: "Tuesday" },
            { wed: "Wednesday" },
            { thurs: "Thursday" },
            { fri: "Friday" },
            { sat: "Saturday" },
          ],
        }
      ],
      listName : "Set Day Of Week",
      displayText : "Set Day Of Week to {0}",
      description : "Sets the day of week. (does not manipulate time)",
    },
    AddDateTime:{
      category: "datetime",
      forward: "AddDateTime",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "minutes",
          name: "Minutes",
          desc: "The minutes to add.",
          type: "number",
          value: "0",
        },
        {
          id: "hours",
          name: "Hours",
          desc: "The hours to add.",
          type: "number",
          value: "0",
        },
        {
          id: "days",
          name: "Days",
          desc: "The days to add.",
          type: "number",
          value: "0",
        },
        {
          id: "months",
          name: "Months",
          desc: "The months to add.",
          type: "number",
          value: "0",
        },
        {
          id: "years",
          name: "Years",
          desc: "The years to add.",
          type: "number",
          value: "0",
        }
      ],
      listName : "Add Date Time",
      displayText : "Add {0} minutes, {1} hours, {2} days, {3} months, {4} years",
      description : "Adds the specified amount of time to the current date and time.",
    },
    SetAlarm: {
      category : "triggers",
      forward: "SetAlarm",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "tag",
          name: "Tag",
          desc: "The tag to set.",
          type: "string",
          value: "",
        },
        {
          id: "hour",
          name: "Hour",
          desc: "The hour to set.",
          type: "number",
          value: "0",
        },
        {
          id: "minute",
          name: "Minute",
          desc: "The minute to set.",
          type: "number",
          value: "0",
        },
        {
          id: "ampm",
          name: "Time Phase",
          desc: "The time phase to set. (am/pm)",
          type: "combo",
          value: "am",
          items: [
            { "am": "am" },
            { "pm": "pm" },
          ],
        },
        {
          id: "repeat",
          name: "Repeat",
          desc: "If the alarm should repeat.",
          type: "boolean",
          value: "false",
        }
      ],
      listName : "Set Alarm",
      displayText : "Set Alarm {0} to {1}:{2} {3}, repeat={4}",
      description : "Sets the alarm. will trigger OnAlaram condition when time is reached.",
    },
    RemoveAlarm: {
      category : "triggers",
      forward: "RemoveAlarm",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "tag",
          name: "Tag",
          desc: "The tag to remove.",
          type: "string",
          value: "",
        }
      ],
      listName : "Remove Alarm",
      displayText : "Remove Alarm {0}",
      description : "Removes the alarm.",
    },
    SetDateTrigger: {
      category : "triggers",
      forward: "SetDateTrigger",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "tag",
          name: "Tag",
          desc: "The tag to set.",
          type: "string",
          value: "",
        },
        {
          id: "day",
          name: "Day",
          desc: "The day to set.",
          type: "number",
          value: "1",
        },
        {
          id: "month",
          name: "Month",
          desc: "The month to set.",
          type: "number",
          value: "1",
        },
        {
          id: "year",
          name: "Year",
          desc: "The year to set.",
          type: "number",
          value: "2021",
        },
      ],
      listName : "Set Date Trigger",
      displayText : "Set Date Trigger {0} to {2}/{1}/{3}",
      description : "Sets the date trigger. will trigger OnDateTrigger condition when date is reached.",
    },
    RemoveDateTrigger: {
      category : "triggers",
      forward: "RemoveDateAlaram",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "tag",
          name: "Tag",
          desc: "The tag to remove.",
          type: "string",
          value: "",
        }
      ],
      listName : "Remove Date Trigger",
      displayText : "Remove Date Trigger {0}",
      description : "Removes the date trigger.",
    },
    SetMonthlyTrigger: {
      category : "triggers",
      forward: "SetMonthlyTrigger",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "tag",
          name: "Tag",
          desc: "The tag to set.",
          type: "string",
          value: "",
        },
        {
          id: "day",
          name: "Day",
          desc: "The day to set.",
          type: "number",
          value: "1",
        },
      ],
      listName : "Set Monthly Trigger",
      displayText : "Set Monthly Trigger {0} to {1} of every month",
      description : "Sets the monthly trigger. will trigger OnMonthlyTrigger condition when date is reached.",
    },
    RemoveMonthlyTrigger: {
      category : "triggers",
      forward: "RemoveMonthlyTrigger",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "tag",
          name: "Tag",
          desc: "The tag to remove.",
          type: "string",
          value: "",
        }
      ],
      listName : "Remove Monthly Trigger",
      displayText : "Remove Monthly Trigger {0}",
      description : "Removes the monthly trigger.",
    },
    SetYearlyTrigger: {
      category : "triggers",
      forward: "SetYearlyTrigger",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "tag",
          name: "Tag",
          desc: "The tag to set.",
          type: "string",
          value: "",
        },
        {
          id: "day",
          name: "Day",
          desc: "The day to set.",
          type: "number",
          value: "1",
        },
        {
          id: "month",
          name: "Month",
          desc: "The month to set.",
          type: "number",
          value: "1",
        },
      ],
      listName : "Set Yearly Trigger",
      displayText : "Set Yearly Trigger {0} to {1}/{2}",
      description : "Sets the yearly trigger. will trigger OnYearlyTrigger condition when date is reached.",
    },
    RemoveYearlyTrigger: {
      category : "triggers",
      forward: "RemoveYearlyTrigger",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "tag",
          name: "Tag",
          desc: "The tag to remove.",
          type: "string",
          value: "",
        }
      ],
      listName : "Remove Yearly Trigger",
      displayText : "Remove Yearly Trigger {0}",
      description : "Removes the yearly trigger.",
    },
    NextHour: {
      category : "time",
      forward: "NextHour",
      highlight : false,
      deprecated : false,
      params: [],
      listName : "Go To Next Hour",
      displayText : "Go To Next Hour",
      description : "Goes to the next hour.",
    },
    NextDay: {
      category : "date",
      forward: "NextDay",
      highlight : false,
      deprecated : false,
      params: [],
      listName : "Go To Next Day",
      displayText : "Go To Next Day",
      description : "Goes to the next day.",
    },
    NextMonth: {
      category : "date",
      forward: "NextMonth",
      highlight : false,
      deprecated : false,
      params: [],
      listName : "Go To Next Month",
      displayText : "Go To Next Month",
      description : "Goes to the next month.",
    },
    NextYear: {
      category : "date",
      forward: "NextYear",
      highlight : false,
      deprecated : false,
      params: [],
      listName : "Go To Next Year",
      displayText : "Go To Next Year",
      description : "Goes to the next year.",
    },
    NextDayPhase: {
      category : "dayPhase",
      forward: "NextDayPhase",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "phase",
          name: "Phase",
          desc: "The phase to go to.",
          type: "combo",
          value: "dawn",
          items: [
            { "dawn": "Dawn" },
            { "morning": "Morning" },
            { "afternoon": "Afternoon" },
            { "day": "Day" },
            { "dusk": "Dusk" },
            { "night": "Night" },
            { "late-night": "Late Night" },
          ],
        }
      ],
      listName : "Go To Next Day Phase",
      displayText : "Go To Next {0} Day Phase",
      description : "Goes to the next day phase.",
    },
    NextSeason: {
      category : "season",
      forward: "NextSeason",
      highlight : false,
      deprecated : false,
      params: [],
      listName : "Go To Next Season",
      displayText : "Go To Next Season",
      description : "Goes to the next season.",
    },
    LoadJson: {
      category : "settings",
      forward: "LoadJson",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "json",
          name: "Json",
          desc: "The json to load.",
          type: "string",
          value: "",
        }
      ],
      listName : "Load Json",
      displayText : "Load Json {0}",
      description : "Loads the json.",
    },




    // AddSpecificDateTrigger:{
    // },
    // AddYearlyDateTrigger:{
    // },
    // AddMonthlyDateTrigger:{
    // },

    /*
    SampleAction: {
      // The category of the action as it appears in the add action dialog
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this action
      // Cases where you might not want this are:
      // 1- If the action params are incompatible with the script interface
      // 2- If you don't want it to appear in the script interface
      // 3- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the action in the add action dialog
      highlight: true,

      // Set to true to hide the action in the interface. False by default if not specified.
      deprecated: false,

      // Marks the action as async. Defaults to false if not specified.
      isAsync: false,

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
            - "boolean"

            // The following types can take a default value but CANNOT be automatically generated in the script interface
            - "combo"

            // The following types CANNOT take a default value AND CANNOT be automatically generated in the script interface
            - "cmp"
            - "object"
            - "objectname"
            - "layer"
            - "layout"
            - "keyb"
            - "instancevar"
            - "instancevarbool"
            - "eventvar"
            - "eventvarbool"
            - "animation"
            - "objinstancevar"

          // The default value of the parameter. Can be omitted if the type is not a string, number, any, boolean or combo.
          value: "the default value of the parameter",

          // Only for type "combo"
          items: [
            {"itemId1": "itemName1"},
            {"itemId2": "itemName2"},
            {"itemId3": "itemName3"},
          ],

          // Only for type "object"
          allowedPluginIds: ["Sprite", "TiledBg"],
        },
      ],

      // The name of the action as it appears in the add action dialog
      listName: "Sample Action",

      // The text that appears in the event sheet. Note, every single param must be used in the display text.
      // You can also use [b] and [i] tags.
      displayText: "Sample action [i]{0}[/i]",

      // The description of the action as it appears in the add action dialog
      description: "This is a sample action",
    },
    */
  },
  Cnds: {
    IsEnabled: {
      category : "settings",
      forward: "IsEnabled",
      highlight : false,
      deprecated : false,
      params: [],
      listName : "Is Ticking",
      displayText : "Is Ticking",
      description : "Check if the time system is enabled and is ticking.",
    },
    OnTick: {
      category : "time",
      handler: `() => { return true; }`,
      highlight : false,
      deprecated : false,
      isTrigger : true,
      params: [],
      listName : "On Tick",
      displayText : "On Tick",
      description : "Triggered every tick.",
    },
    OnMinute: {
      category : "time",
      handler: `() => { return true; }`,
      highlight : false,
      deprecated : false,
      isTrigger : true,
      params: [],
      listName : "On Minute",
      displayText : "On Minute",
      description : "Triggered every minute.",
    },
    OnHour: {
      category : "time",
      handler: `() => { return true; }`,
      highlight : false,
      deprecated : false,
      isTrigger : true,
      params: [],
      listName : "On Hour",
      displayText : "On Hour",
      description : "Triggered every hour.",
    },
    OnDay: {
      category : "date",
      handler: `() => { return true; }`,
      highlight : false,
      deprecated : false,
      isTrigger : true,
      params: [],
      listName : "On Day",
      displayText : "On Day",
      description : "Triggered every day.",
    },
    OnWeek: {
      category : "date",
      handler: `() => { return true; }`,
      highlight : false,
      deprecated : false,
      isTrigger : true,
      params: [],
      listName : "On Week",
      displayText : "On Week",
      description : "Triggered every week.",
    },
    OnMonth: {
      category : "date",
      handler: `() => { return true; }`,
      highlight : false,
      deprecated : false,
      isTrigger : true,
      params: [],
      listName : "On Month",
      displayText : "On Month",
      description : "Triggered every month.",
    },
    OnYear: {
      category : "date",
      handler: `() => { return true; }`,
      highlight : false,
      deprecated : false,
      isTrigger : true,
      params: [],
      listName : "On Year",
      displayText : "On Year",
      description : "Triggered every year.",
    },
    OnAnyDateTimeChanged: {
      category : "datetime",
      handler: `() => { return true; }`,
      highlight : false,
      deprecated : false,
      isTrigger : true,
      params: [],
      listName : "On Date/Time Changed",
      displayText : "On Date/Time Changed",
      description : "Triggered when any date/time value changes.",
    },
    OnDayPhaseChange: {
      category : "dayPhase",
      handler: `() => { return true; }`,
      highlight : false,
      deprecated : false,
      isTrigger : true,
      params: [],
      listName : "On Day Phase Change",
      displayText : "On Day Phase Change",
      description : "Triggered when the day phase changes.",
    },
    IsDayPhase: {
      category : "dayPhase",
      forward: "IsDayPhase",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "phase",
          name: "Phase",
          desc: "The phase to check.",
          type: "combo",
          value: "dawn",
          items: [
            { "dawn": "Dawn" },
            { "morning": "Morning" },
            { "afternoon": "Afternoon" },
            { "day": "Day" },
            { "dusk": "Dusk" },
            { "night": "Night" },
            { "late-night": "Late Night" },
          ],
        }
      ],
      listName : "Day Phase Is",
      displayText : "Day Phase = [b]{0}[/b]",
      description : "Check if the current day phase is the specified phase.",
    },
    IsDayTime:{
      category : "dayPhase",
      forward: "IsDayTime",
      highlight : false,
      deprecated : false,
      params: [],
      listName : "Is Day Time",
      displayText : "Is Day Time",
      description : "Check if the current day phase is day. [6:00am - 8:00pm]",
    },
    IsNightTime:{
      category : "dayPhase",
      forward: "IsNightTime",
      highlight : false,
      deprecated : false,
      params: [],
      listName : "Is Night Time",
      displayText : "Is Night Time",
      description : "Check if the current day phase is night. [8:00pm - 6:00am]",
    },
    OnNoon:{
      category: "time",
      handler: `() => { return true; }`,
      highlight : false,
      deprecated : false,
      isTrigger : true,
      params: [],
      listName : "On Noon",
      displayText : "On Noon",
      description : "Triggered when the time is noon.",
    },
    OnMidnight:{
      category: "time",
      handler: `() => { return true; }`,
      highlight : false,
      deprecated : false,
      isTrigger : true,
      params: [],
      listName : "On Midnight",
      displayText : "On Midnight",
      description : "Triggered when the time is midnight.",
    },
    OnSeasonChanged: {
      category : "season",
      handler: `() => { return true; }`,
      highlight : false,
      deprecated : false,
      isTrigger : true,
      params: [],
      listName : "On Season Changed",
      displayText : "On Season Changed",
      description : "Triggered when the season changes.",
    },
    IsSeason: {
      category : "season",
      forward: "IsSeason",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "season",
          name: "Season",
          desc: "The season to check.",
          type: "combo",
          value: "spring",
          items: [
            { "spring": "Spring" },
            { "summer": "Summer" },
            { "fall": "Fall" },
            { "winter": "Winter" },
          ],
        }
      ],
      listName : "Season Is",
      displayText : "Season = [b]{0}[/b]",
      description : "Check if the current season is the specified season.",
    },
    IsDateTime: {
      category : "datetime",
      forward: "IsDateTime",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "day",
          name: "Day",
          desc: "The day to check. (1-31)",
          type: "number",
          value: "1",
        },
        {
          id: "month",
          name: "Month",
          desc: "The month to check. (1-12)",
          type: "number",
          value: "1",
        },
        {
          id: "year",
          name: "Year",
          desc: "The year to check. (0-9999)",
          type: "number",
          value: "2021",
        },
        {
          id: "hour",
          name: "Hour",
          desc: "The hour to check. (0-12)",
          type: "number",
          value: "0",
        },
        {
          id: "minute",
          name: "Minute",
          desc: "The minute to check. (0-59)",
          type: "number",
          value: "0",
        },
        {
          id: "ampm",
          name: "Time Phase",
          desc: "The time phase to check. (am/pm)",
          type: "combo",
          value: "am",
          items: [
            { "am": "am" },
            { "pm": "pm" },
          ],
        },
      ],
      listName : "Date/Time Is",
      displayText : "Date/Time = [b]{0}/{1}/{2} {3}:{4} {5}[/b]",
      description : "Check if the current date/time is the specified date/time.",
    },
    IsDate: {
      category : "date",
      forward: "IsDate",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "day",
          name: "Day",
          desc: "The day to check. (1-31)",
          type: "number",
          value: "1",
        },
        {
          id: "month",
          name: "Month",
          desc: "The month to check. (1-12)",
          type: "number",
          value: "1",
        },
        {
          id: "year",
          name: "Year",
          desc: "The year to check. (0-9999)",
          type: "number",
          value: "2021",
        },
      ],
      listName : "Date Is",
      displayText : "Date = [b]{0}/{1}/{2}[/b]",
      description : "Check if the current date is the specified date.",
    },
    IsTime: {
      category : "time",
      forward: "IsTime",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "hour",
          name: "Hour",
          desc: "The hour to check. (0-12)",
          type: "number",
          value: "0",
        },
        {
          id: "minute",
          name: "Minute",
          desc: "The minute to check. (0-59)",
          type: "number",
          value: "0",
        },
        {
          id: "ampm",
          name: "Time Phase",
          desc: "The time phase to check. (am/pm)",
          type: "combo",
          value: "am",
          items: [
            { "am": "am" },
            { "pm": "pm" },
          ],
        },
      ],
      listName : "Time Is",
      displayText : "Time = [b]{0}:{1} {2}[/b]",
      description : "Check if the current time is the specified time.",
    },
    IsHour: {
      category : "time",
      forward: "IsHour",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "hour",
          name: "Hour",
          desc: "The hour to check. (0-12)",
          type: "number",
          value: "0",
        },
        {
          id: "ampm",
          name: "Time Phase",
          desc: "The time phase to check. (am/pm)",
          type: "combo",
          value: "am",
          items: [
            { "am": "am" },
            { "pm": "pm" },
          ],
        },
      ],
      listName : "Hour Is",
      displayText : "Hour = [b]{0} {1}[/b]",
      description : "Check if the current hour is the specified hour.",
    },
    IsDay: {
      category : "date",
      forward: "IsDay",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "day",
          name: "Day",
          desc: "The day to check. (1-31)",
          type: "number",
          value: "1",
        },
      ],
      listName : "Day Is",
      displayText : "Day = [b]{0}[/b]",
      description : "Check if the current day is the specified day.",
    },
    IsDayOfWeek: {
      category : "date",
      forward: "IsDayOfWeek",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "day",
          name: "Day",
          desc: "The day of the week to check.",
          type: "combo",
          value: "sun",
          items: [
            { "sun": "Sunday" },
            { "mon": "Monday" },
            { "tue": "Tuesday" },
            { "wed": "Wednesday" },
            { "thurs": "Thursday" },
            { "fri": "Friday" },
            { "sat": "Saturday" },
          ],
        },
      ],
      listName : "Day Of Week Is",
      displayText : "Day Of Week = [b]{0}[/b]",
      description : "Check if the current day of the week is the specified day of the week.",
    },
    IsMonth: {
      category : "date",
      forward: "IsMonth",
      highlight : false,
      deprecated : false,
      params: [
        {
          id: "month",
          name: "Month",
          desc: "The month to check. (1-12)",
          type: "number",
          value: "1",
        },
      ],
      listName : "Month Is",
      displayText : "Month = [b]{0}[/b]",
      description : "Check if the current month is the specified month.",
    },
    OnAlarm: {
      category : "triggers",
      forward: "OnAlarm",
      highlight : false,
      deprecated : false,
      isFakeTrigger : true,
      params: [
        {
          id: "tag",
          name: "Tag",
          desc: "The tag to check.",
          type: "string",
          value: "",
        },
      ],
      listName : "On Alarm",
      displayText : "On Alarm {0}",
      description : "Triggered when the alarm is triggered.",
    },
    OnDateTrigger: {
      category : "triggers",
      forward: "OnDateTrigger",
      highlight : false,
      deprecated : false,
      isFakeTrigger : true,
      params: [
        {
          id: "tag",
          name: "Tag",
          desc: "The tag to check.",
          type: "string",
          value: "",
        },
      ],
      listName : "On Date Trigger",
      displayText : "On Date Trigger {0}",
      description : "Triggered when the date trigger is triggered.",
    },
    OnMonthlyTrigger: {
      category : "triggers",
      forward: "OnMonthlyTrigger",
      highlight : false,
      deprecated : false,
      isFakeTrigger : true,
      params: [
        {
          id: "tag",
          name: "Tag",
          desc: "The tag to check.",
          type: "string",
          value: "",
        },
      ],
      listName : "On Monthly Trigger",
      displayText : "On Monthly Trigger {0}",
      description : "Triggered when the monthly trigger is triggered.",
    },
    OnYearlyTrigger: {
      category : "triggers",
      forward: "OnYearlyTrigger",
      highlight : false,
      deprecated : false,
      isFakeTrigger : true,
      params: [
        {
          id: "tag",
          name: "Tag",
          desc: "The tag to check.",
          type: "string",
          value: "",
        },
      ],
      listName : "On Yearly Trigger",
      displayText : "On Yearly Trigger {0}",
      description : "Triggered when the yearly trigger is triggered.",
    },
    OnSolarTermChanged:{
      category : "solarTerm",
      handler: `() => { return true; }`,
      highlight : false,
      deprecated : false,
      isTrigger : true,
      params: [],
      listName : "On Solar Term Changed",
      displayText : "On Solar Term Changed",
      description : "Triggered when the solar term changes.",
    },
    IsSolarTerm: {
      category: "solarTerm",
      forward: "IsSolarTerm",
      highlight: false,
      deprecated: false,
      params: [
        {
          id: "solarTerm",
          name: "Solar Term",
          desc: "The solar term to check.",
          type: "combo",
          value: "lichun",
          items: [
            { "lichun": "Beginning Of Spring" },
            { "yushui": "Rain Water" },
            { "jingzhe": "Awakening Of Insects" },
            { "chunfen": "Spring Equinox" },
            { "qingming": "Pure Brightness" },
            { "guyu": "Grain Rain" },
            { "lixia": "Beginning Of Summer" },
            { "xiaoman": "Grain Buds" },
            { "mangzhong": "Grain In Ear" },
            { "xiazhi": "Summer Solstice" },
            { "xiaoshu": "Minor Heat" },
            { "dashu": "Major Heat" },
            { "liqiu": "Beginning Of Autumn" },
            { "chushu": "End Of Heat" },
            { "baiu": "White Dew" },
            { "qiufen": "Autumn Equinox" },
            { "hanlu": "Cold Dew" },
            { "shuangjiang": "Frosts Descent" },
            { "lidong": "Beginning Of Winter" },
            { "xiaoxue": " Minor Snow" },
            { "daxue": " Major Snow" },
            { "dongzhi": "Winter Solstice" },
            { "xiaohan": "Minor Cold" },
            { "dahan": "Major Cold" },
          ],
        },
      ],
      listName: "Solar Term Is",
      displayText: "Solar Term = [b]{0}[/b]",
      description: "Check if the current solar term is the specified solar term.",
    }
    /*
    SampleCondition: {
      // The category of the action as it appears in the add condition dialog
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this condition
      // Cases where you might not want this are:
      // 1- If the condition params are incompatible with the script interface
      // 2- If you don't want it to appear in the script interface
      // 3- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the condition in the add condition dialog
      highlight: true,

      // Set to true to hide the condition in the interface. False by default if not specified.
      deprecated: false,

      // special conditions properties. These can all be omitted, and they will default to the following values:
      isTrigger: false,
      isFakeTrigger: false,
      isStatic: false,
      isLooping: false,
      isInvertible: true,
      isCompatibleWithTriggers: true,

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
            - "boolean"

            // The following types can take a default value but CANNOT be automatically generated in the script interface
            - "combo"

            // The following types CANNOT take a default value AND CANNOT be automatically generated in the script interface
            - "cmp"
            - "object"
            - "objectname"
            - "layer"
            - "layout"
            - "keyb"
            - "instancevar"
            - "instancevarbool"
            - "eventvar"
            - "eventvarbool"
            - "animation"
            - "objinstancevar"

          // The default value of the parameter. Can be omitted if the type is not a string, number, any, boolean or combo.
          value: "the default value of the parameter",

          // Only for type "combo"
          items: [
            {"itemId1": "itemName1"},
            {"itemId2": "itemName2"},
            {"itemId3": "itemName3"},
          ],

          // Only for type "object"
          allowedPluginIds: ["Sprite", "TiledBg"],
        },
      ],

      // The name of the condition as it appears in the add condition dialog
      listName: "Sample Condition",

      // The text that appears in the event sheet. Note, every single param must be used in the display text.
      // You can also use [b] and [i] tags.
      displayText: "Sample condition [i]{0}[/i]",

      // The description of the condition as it appears in the add condition dialog
      description: "This is a sample condition",
    },
    */
  },
  Exps: {
    CurrentTick: {
      category : "time",
      handler: `function () { return this.currentTick; }`,
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "number",
      isVariadicParameters: false,
      description : "The current tick.",
    },
    CurrentMinute: {
      category : "time",
      handler: `function () { return this.currentMinute; }`,
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "number",
      isVariadicParameters: false,
      description : "The current minute.",
    },
    CurrentHour: {
      category : "time",
      handler: `function () { return this.currentHour; }`,
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "number",
      isVariadicParameters: false,
      description : "The current hour.",
    },
    CurrentDay: {
      category : "date",
      handler: `function () { return this.currentDay; }`,
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "number",
      isVariadicParameters: false,
      description : "The current day.",
    },
    CurrentWeek: {
      category : "date",
      handler: `function () { return this.currentWeek; }`,
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "number",
      isVariadicParameters: false,
      description : "The current week.",
    },
    CurrentMonth: {
      category : "date",
      handler: `function () { return this.currentMonth; }`,
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "number",
      isVariadicParameters: false,
      description : "The current month.",
    },
    CurrentYear: {
      category : "date",
      handler: `function () { return this.currentYear; }`,
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "number",
      isVariadicParameters: false,
      description : "The current year.",
    },
    CurrentDayOfWeek: {
      category : "date",
      handler: `function () { return this.currentDayinWeek; }`,
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "string",
      isVariadicParameters: false,
      description : "The current day of the week.",
    },
    CurrentDayName: {
      category : "date",
      forward: "DayFullName",
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "string",
      isVariadicParameters: false,
      description : "The current day of the week. (full-name)",
    },
    CurrentDayShortName: {
      category : "date",
      forward: "DayShortName",
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "string",
      isVariadicParameters: false,
      description : "The current day of the week. (short name)",
    },
    CurrentMonthName: {
      category : "date",
      forward: "MonthFullName",
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "string",
      isVariadicParameters: false,
      description : "The current month. (full-name)",
    },
    CurrentMonthShortName: {
      category : "date",
      forward: "MonthShortName",
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "string",
      isVariadicParameters: false,
      description : "The current month. (short name)",
    },
    CurrentTime24: {
      category : "time",
      forward: "Time24",
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "string",
      isVariadicParameters: false,
      description : "The current time in 24 hour format.",
    },
    CurrentTime12: {
      category : "time",
      forward: "Time12",
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "string",
      isVariadicParameters: false,
      description : "The current time in 12 hour format.",
    },
    CurrentDayPhase: {
      category : "dayPhase",
      forward: "CurrentPhaseOfDayIndex",
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "number",
      isVariadicParameters: false,
      description : "The current day phase index. (0=dawn, 1=morning, 2=afternoon, 3=day, 4=dusk, 5=night, 6=late-night)",
    },
    CurrentDayPhaseName: {
      category : "dayPhase",
      handler: `function () { return this.currentPhase; }`,
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "string",
      isVariadicParameters: false,
      description : "The current day phase. (full-name)",
    },
    CurrentSeason: {
      category : "season",
      forward: "CurrentSeasonIndex",
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "number",
      isVariadicParameters: false,
      description : "The current season index. (0=spring, 1=summer, 2=fall, 3=winter)",
    },
    CurrentSeasonName: {
      category : "season",
      handler: `function () { return this.currentSeason; }`,
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "string",
      isVariadicParameters: false,
      description : "The current season name.",
    },
    TickRate: {
      category : "settings",
      handler: `function () { return this.tickRate; }`,
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "number",
      isVariadicParameters: false,
      description : "The tick rate.",
    },
    TicksPer: {
      category : "settings",
      handler: `function () { return this.ticksPer; }`,
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "number",
      isVariadicParameters: false,
      description : "The ticks per {x} duration.",
    },
    AsJson: {
      category : "settings",
      forward: "AsJson",
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "string",
      isVariadicParameters: false,
      description : "The time system as json.",
    },
    CurrentDayInYear: {
      category : "date",
      forward: "CurrentDayInYear",
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "number",
      isVariadicParameters: false,
      description : "The current day in the year. (1-365)",
    },
    CurrentSolarTerm: {
      category : "solarTerm",
      forward: "CurrentSolarTerm",
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "number",
      isVariadicParameters: false,
      description : "The current solar terms index (0-23).",
    },
    CurrentSolarTermName: {
      category : "solarTerm",
      forward: "CurrentSolarTermName",
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "string",
      isVariadicParameters: false,
      description : "The current solar terms. (full-name)",
    },
    CurrentSolarTermLongitude: {
      category : "solarTerm",
      forward: "CurrentSolarTermLongitude",
      highlight : false,
      deprecated : false,
      params: [],
      returnType: "number",
      isVariadicParameters: false,
      description : "The current solar terms longitude. in degrees.",
    },
    /*
    SampleExpression: {
      // The category of the action as it appears in the expression picker
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this expression
      // Cases where you might not want this are:
      // 1- If you don't want it to appear in the script interface
      // 2- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the expression in the expression picker
      highlight: true,

      // Set to true to hide the expression in the interface. False by default if not specified.
      deprecated: false,

      // The type of the expression.
      returnType:
        - "string"
        - "number"
        - "any" // must be either string or number

      // Set to true if the expression is variadic. False by default if not specified.
      isVariadicParameters: false

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
        },
      ],

      // The description of the expression as it appears in the expression picker
      description: "This is a sample expression",
    },
    */
  }
};
